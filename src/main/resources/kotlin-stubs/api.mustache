package {{apiPackage}}

import com.github.tomakehurst.wiremock.client.MappingBuilder
import com.github.tomakehurst.wiremock.client.ResponseDefinitionBuilder
import com.github.tomakehurst.wiremock.client.WireMock
import com.github.tomakehurst.wiremock.client.WireMock.stubFor
import com.github.tomakehurst.wiremock.matching.AnythingPattern
import com.github.tomakehurst.wiremock.matching.StringValuePattern
import com.squareup.moshi.Types
import com.squareup.moshi.JsonAdapter

import {{apiPackage}}.internal.*
{{#imports}}
import {{import}}
{{/imports}}

{{#operations}}
/**
 * Stubbing API interface for {{classname}}.
 *
 * This class can generate stubs and inject these in WireMock for the supported HTTP methods of the path with the
 * corresponding status codes.
 */
class {{classname}}Stub(host: String = "localhost", port: Int = 8080) : AbstractStub(host, port) {
{{#operation}}

    /**
     * Construct a stub builder for a '{{httpMethod}}' request.
     {{#hasParams}}
     *
     {{/hasParams}}
     {{#allParams}}
     * @param {{paramName}} {{description}}
     {{/allParams}}
     *
     * @return An instance of [{{>api-stub-builder-type}}]
     */
    {{#isDeprecated}}
    @Deprecated(message = "This operation has been deprecated")
    {{/isDeprecated}}
    fun {{operationId}}({{>api-stub-builder-parameters}}): {{>api-stub-builder-type}} {
        val path = parameterized("{{path}}"{{#pathParams}}{{^last}}, {{/last}}{{paramName}}{{/pathParams}})
        return {{>api-stub-builder-type}}(wiremock, WireMock.{{#lambda.lowercase}}{{httpMethod}}{{/lambda.lowercase}}(path)
        {{#queryParams}}
            .withQueryParam("{{paramName}}", {{paramName}})
        {{/queryParams}})
    }

    /** Stub generation interface for [{{operationId}}]. */
    {{#isDeprecated}}
    @Deprecated(message = "This operation has been deprecated")
    {{/isDeprecated}}
    class {{>api-stub-builder-type}} internal constructor(wiremock: WireMock, stub: MappingBuilder)
        : AbstractStubBuilder(wiremock, stub) {
    {{#responses}}

        {{^isDefault}}
        /**
         * Inject the stub in WireMock with a http '{{code}}' response code.
         {{#baseType}}
         *
         * @param body The body of the response.
         {{/baseType}}
         */
        fun {{#lambda.readableHttpCode}}{{code}}{{/lambda.readableHttpCode}}({{#baseType}}body: {{>api-stub-builder-result-type}}{{/baseType}}) {
            {{#baseType}}
            {{#lambda.indented_12}}{{>api-stub-builder-adapter}}{{/lambda.indented_12}}
            {{/baseType}}
            val mapping = stub.willReturn(WireMock.status({{code}}){{#baseType}}.withBody(adapter.toJson(body)){{/baseType}})
            wiremock.register(mapping)
        }
        {{/isDefault}}
        {{#isDefault}}
        {{#baseType}}
        /**
         * Inject the stub in WireMock using [code] as the http response code.
         *
         * @param code The http response code.
         * @param body The body of the response.
         */
        fun response(code: Int, body: {{>api-stub-builder-result-type}}) {
            {{#lambda.indented_12}}{{>api-stub-builder-adapter}}{{/lambda.indented_12}}
            val mapping = stub.willReturn(WireMock.status(code).withBody(adapter.toJson(body)))
            wiremock.register(mapping)
        }
        {{/baseType}}
        {{/isDefault}}
    {{/responses}}
    }
{{/operation}}
}
{{/operations}}
